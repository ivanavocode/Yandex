{"version":3,"sources":["web-service/web-service.js","components/route-list/index.js","components/route-list/route-list.js","components/add-item/index.js","components/add-item/add-item.js","components/yandex-map/index.js","components/yandex-map/yandex-map.js","components/app/app.js","components/app/index.js","index.js"],"names":["webService","geocode","url","fetch","res","json","coor1","coor2","this","requestURL","name","response","GeoObjectCollection","featureMember","GeoObject","description","Point","pos","RouteList","props","coordinates","onDelItem","NewLink","map","item","index","id","console","log","key","draggableId","toString","provided","ref","innerRef","draggableProps","dragHandleProps","className","onClick","onDragStart","result","onDragEnd","destination","sourceId","source","destinationId","onDragEndList","droppableId","droppableProps","placeholder","AddItem","state","value","handleChange","event","setState","target","handleSubmit","preventDefault","onItemAdded","onSubmit","type","onChange","Component","YandexMap","loading","mapData","onAddItem","PlaceMark","coordinate","coor","properties","hintContent","balloonContent","modules","options","draggable","e","geometry","width","height","defaultState","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","api","App","Id","center","zoom","DelItem","filter","coords","get","getName","then","body","NewItem","toFixed","NewCoor","getCoordinates","nameBody","descriptionBody","UpdItem","find","getGeoCode","split","reverse","letter","String","fromCharCode","Letter","from","to","DragItem","splice","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee509c2e.chunk.js","sourcesContent":["\r\nexport default class webService {\r\n    \r\nasync requestURL(geocode) {\r\n    const APIkey = '16e669f2-ef27-4d0c-a11f-e7cbf67c2026';\r\n  const url = `https://geocode-maps.yandex.ru/1.x/?apikey=${APIkey}&format=json&geocode=${geocode}`;\r\n    let res = await fetch(url);\r\n    // console.log(url);\r\n    return await res.json();\r\n    \r\n  }  \r\n\r\n  async getName(geocode) {\r\n    let coor1 = geocode[1];\r\n    let coor2 = geocode[0];\r\n      const res = await this.requestURL([coor1, coor2]);\r\n     const name = res.response.GeoObjectCollection.featureMember[0].GeoObject.name;\r\n    const description = res.response.GeoObjectCollection.featureMember[0].GeoObject.description;\r\n      return {name,description};\r\n  }\r\n  async getGeoCode(name) {\r\n\r\n      const res = await this.requestURL(name);\r\n     const geocode = res.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;\r\n     const description = res.response.GeoObjectCollection.featureMember[0].GeoObject.description;\r\n\r\n      return {geocode,description};\r\n  }\r\n\r\n  async getFullInfo(geocode) {\r\n      const res = await this.requestURL(geocode);\r\n      return res;\r\n  }\r\n\r\n}\r\n\r\n// const api = new ApiService();\r\n\r\n// api.getName().then(name => {\r\n//     console.log(name)\r\n// })\r\n// api.getFullInfo().then(body => {\r\n//     console.log(body)\r\n// })\r\n  \r\n//   requestURL(geocode).then((body) => {\r\n//     console.log(body.response.GeoObjectCollection.featureMember[0].GeoObject.name)\r\n//     console.log(body)\r\n//   })","import RouteList from './route-list'\r\n\r\nexport default RouteList;","import React from 'react';\r\nimport './route-list.css';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst RouteList = (props) => {\r\n  const { coordinates, onDelItem} = props;\r\n\r\n  const NewLink = coordinates.map((item, index) => {\r\n    const {id, name } = item;\r\n    console.log('draggable:',id,index)\r\n    return (\r\n      <Draggable key={id} draggableId={id.toString()} index={index}>\r\n        \r\n        \r\n      {(provided) => (\r\n      <li key={index}\r\n      ref={provided.innerRef}\r\n      {...provided.draggableProps}\r\n      {...provided.dragHandleProps}\r\n      >\r\n      <span>{name}</span>\r\n      <button className=\"click\" onClick={() => onDelItem(id)}>x</button>\r\n    </li>\r\n          )}\r\n          </Draggable>\r\n        )\r\n      }\r\n    )\r\n\r\n    const onDragEndList = (result) => {\r\n\r\n      // let style = {\r\n      //     display: \"none\",\r\n      // }\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n        return;\r\n      }\r\n      const sourceId = result.source.index;\r\n      const destinationId = result.destination.index;\r\n      props.onDragEndList(sourceId,destinationId);\r\n      // console.log('ondragend',sourceId,destinationId)\r\n    }\r\n    const onDragStart = (result) => {\r\n      // console.log(\"1\")\r\n    }\r\n\r\n    return (\r\n    <DragDropContext onDragStart={onDragStart} onDragEnd={onDragEndList}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided) => (\r\n            \r\n            <ul\r\n              className=\"PointList\"\r\n              ref={provided.innerRef} \r\n              {...provided.droppableProps}\r\n            >\r\n              {NewLink}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n    </DragDropContext>\r\n        )\r\n      }\r\n\r\nexport default RouteList;\r\n\r\n/*API-KEY\r\n16e669f2-ef27-4d0c-a11f-e7cbf67c2026\r\n*/\r\n  /*\r\n  Тимирязевский район\r\n  */","import AddItem from './add-item'\r\nexport default AddItem;","import './add-item.css';\r\nimport React, { Component } from 'react';\r\n\r\nexport default class AddItem extends Component {\r\n\r\n    state = {\r\n        value: '',\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            value: event.target.value\r\n        });\r\n      }\r\n    \r\n      handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { value } = this.state;\r\n        this.setState({ value: '' });\r\n        const cb = this.props.onItemAdded || (() => {});\r\n        cb(value);\r\n\r\n      }\r\n\r\n    render() {\r\n       const { value } = this.state;\r\n        return (\r\n        <form onSubmit={this.handleSubmit} className=\"Form-route\">\r\n                <input type=\"text\"  value={value} onChange={this.handleChange} />\r\n            {/* <button type=\"submit\">Добавить</button> */}\r\n        </form>\r\n\r\n        )\r\n    }\r\n}","import YandexMap from './yandex-map'\r\n\r\nexport default YandexMap;","\r\nimport './yandex-map.css';\r\nimport React, { Component } from 'react';\r\nimport { YMaps, Map, Placemark, Polyline } from 'react-yandex-maps';\r\n// import Spinner from '../spinner';\r\n\r\nexport default class YandexMap extends Component {\r\n\r\n   state = {\r\n       loading: true\r\n   }\r\n\r\n//    componentDidMount() {\r\n//  setTimeout(() => \r\n//  this.setState({\r\n//     loading:false\r\n// })\r\n//  , 5000)\r\n//    }\r\n  \r\n    render() {\r\n        const {mapData, coordinates, onAddItem, onDragEnd } = this.props;\r\n        // const { loading } = this.state;\r\n\r\nconst PlaceMark = coordinates.map(coordinate => {\r\n    const {id, coor, name} = coordinate;\r\n\r\n            return (\r\n                <Placemark \r\n                properties= {{\r\n                    hintContent: name,\r\n                    balloonContent: name,\r\n                }}\r\n                modules= {[\r\n                    ['geoObject.addon.balloon', 'geoObject.addon.hint']\r\n                ]}\r\n                options={{\r\n                    draggable: \"true\",\r\n                }} \r\n                key={id}\r\n                onDragEnd={(e) => onDragEnd(id, e)}\r\n                geometry={coor}\r\n                />\r\n            )\r\n        })\r\n        \r\nlet coordinate = coordinates.map(({coor}) =>  coor )\r\n// console.log(coordinate);\r\n// if(loading) {\r\n//     return <Spinner/>\r\n// }\r\n\r\n        return (\r\n            <div className=\"Map\">\r\n                <YMaps>\r\n                    <Map\r\n                        width = '480px'\r\n                        height = '360px'\r\n                        defaultState={mapData}\r\n                        onClick={onAddItem}\r\n                    >\r\n                    <Polyline\r\n                        geometry={coordinate}\r\n                        options={{\r\n                            balloonCloseButton: false,\r\n                            strokeColor: '#000',\r\n                            strokeWidth: 4,\r\n                            strokeOpacity: 0.5,\r\n                        }}\r\n                    /> \r\n                    {PlaceMark}                    \r\n                    </Map>\r\n                </YMaps>\r\n            </div>\r\n            )\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const mapState = { center: [55.76, 37.64], zoom: 9, controls: [] };\r\n// export default class YandexMap extends Component {\r\n//     map = null;\r\n//     ymaps = null;\r\n//     route = null;\r\n  \r\n//     handleApiAvaliable = ymaps => {\r\n//       this.ymaps = ymaps;\r\n//       const balloonContentBodyLayout = ymaps.templateLayoutFactory.createClass(\r\n//         \"<div>Test</div>\"\r\n//       );\r\n//       ymaps\r\n//         .route(\r\n//           [\r\n//             \"Королев\",\r\n//             { type: \"viaPoint\", point: \"Мытищи\" },\r\n//             \"Химки\",\r\n//             { type: \"wayPoint\", point: [55.811511, 37.312518] }\r\n//           ],\r\n//           { balloonContentBodyLayout }\r\n//         )\r\n//         .then(route => {\r\n//           route.getPaths().options.set({\r\n//             // в балуне выводим только информацию о времени движения с учетом пробок\r\n//             // можно выставить настройки графики маршруту\r\n//             strokeColor: \"0000ffff\",\r\n//             opacity: 0.9\r\n//           });\r\n  \r\n//           // добавляем маршрут на карту\r\n//           this.map.geoObjects.add(route);\r\n//         });\r\n//     };\r\n  \r\n//     addRoute = () => {\r\n//       if (this.ymaps && this.map) {\r\n//         this.ymaps\r\n//           .route([\"Южное Бутово\", \"Москва, метро Парк Культуры\"], {\r\n//             multiRoute: true\r\n//           })\r\n//           .then(route => {\r\n//             this.route = route;\r\n//             this.map.geoObjects.add(route);\r\n//           });\r\n//       }\r\n//     };\r\n  \r\n//     removeRoute = () => {\r\n//       if (this.map && this.route) {\r\n//         this.map.geoObjects.remove(this.route);\r\n//       }\r\n//     };\r\n  \r\n//     render() {\r\n//       return (\r\n//         <div className=\"App\">\r\n//           <div className=\"layer\">\r\n//             <YMaps\r\n//             // Disabling `onApiAvaliable`, it is not supported anymore\r\n//             // onApiAvaliable={ymaps => this.handleApiAvaliable(ymaps)}\r\n//             >\r\n//               <Map\r\n//                 state={mapState}\r\n//                 instanceRef={ref => (this.map = ref)}\r\n//                 height=\"100%\"\r\n//                 width=\"100%\"\r\n//                 // Using onLoad instead of onApiAvaliable\r\n//                 onLoad={ymaps => this.handleApiAvaliable(ymaps)}\r\n//                 // Loading required modules with component\r\n//                 modules={[\"templateLayoutFactory\", \"route\"]}\r\n//               />\r\n//             </YMaps>\r\n//             <button onClick={this.addRoute}>Add route</button>\r\n//             <button onClick={this.removeRoute}>Delete route</button>\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }","import React, { Component } from 'react';\nimport './App.css';\nimport webService from '../../web-service/web-service';\nimport RouteList from '../route-list';\nimport AddItem from '../add-item';\nimport YandexMap from '../yandex-map';\n\nconst api = new webService();\n\nexport default class App extends Component { \n\nId = 2;\n// Letter = 65;\n\n  state = {\n    mapData: {\n      center: [55.751574, 37.573856],\n      zoom: 10,\n    },\n    coordinates: [\n      {id: 0, name: \"Третье транспортное кольцо\", description: \"Москва, Россия\", coor:[\"55.7918\", \"37.6371\"]},\n      {id: 1, name: \"проспект 60-летия Октября, 2/41\", description: \"Москва, Россия\", coor:[\"55.7051\", \"37.5793\"]},\n    ],\n  };\n\n  onDelItem = (id) => {\n    const {coordinates} = this.state;\n    // console.log(coordinates[id].id)\n    // console.log(id)\n    \n    const DelItem = coordinates.filter(coordinate => coordinate.id !== id)\n    this.setState((coordinates) => {\n      return {\n        coordinates: DelItem\n      }\n    })\n  }\n\n    onAddItem = (e) => {\n      const coords = e.get('coords');\n      api.getName(coords).then(body => {\n        let name = body.name;\n        let description = body.description;\n      const  NewItem = { \n        id: this.Id++,\n        // letter: String.fromCharCode(this.Letter++),\n        name: name, description: description,\n        coor: [coords[0].toFixed(4), coords[1].toFixed(4)],\n       };\n    \n        this.setState(({coordinates}) => {\n          const NewArr = [\n            ...coordinates,\n            NewItem\n          ];\n          return {\n            coordinates: NewArr,\n          }\n        })\n      })\n    }\n    // улица Подвойского, вл5/19\n    \n    onDragEnd = (id, e) => {\n     const NewCoor = e.get('target').geometry.getCoordinates();\n\n     api.getName(NewCoor).then(body => {\n      let nameBody = body.name;\n      let descriptionBody = body.description;\n      const newData = [...this.state.coordinates];\n      // { coordinates } = this.state;\n      // const {id, letter, name, description, coor} = coordinates;\n    const  UpdItem = newData.find((coordinate) => coordinate.id === id );\n  \n    UpdItem.name = nameBody;\n    UpdItem.description = descriptionBody;\n    UpdItem.coor = NewCoor;\n    \n    this.setState({coordinates:UpdItem})\n    })\n    }\n    onItemAdded = (e) => {\n      let name = e;\n      api.getGeoCode(e).then(body => {\n        let description = body.description;\n        let coords = body.geocode.split(' ').reverse();\n        // console.log(coords[0], coords[1])\n\n      const  NewItem = { \n        id: this.Id++,\n        letter: String.fromCharCode(this.Letter++),\n        name: name, description: description,\n        coor: [coords[0], coords[1]],\n        };\n    \n        this.setState(({coordinates}) => {\n          const NewArr = [\n            ...coordinates,\n            NewItem\n          ];\n          return {\n            coordinates: NewArr,\n          }\n        })    \n\n      })\n    }\n\n    onDragEndList = (from, to) => {\n    this.setState(({coordinates}) => {\n      const DragItem = coordinates.splice(from, 1)[0];\n      coordinates.splice(to, 0 , DragItem)\n      // const NewArray = [\n      //           ...coordinates.slice(0, to),\n      //           DragArr,\n      //           ...coordinates.slice(to + 1),\n      //         ];\n        return {\n          coordinates \n        }\n    })\n// console.log(from, to)\n// console.log(CopyArr)\n  }\n\n\n    render() {\n\n      const { mapData, coordinates } = this.state;\n      // console.log(coordinates)\n\n\n      return (\n        <React.Fragment>\n          <div className=\"YandexMap\">\n            <div className=\"RouteList\">\n              <AddItem onItemAdded={this.onItemAdded}/> \n\n              <RouteList \n              coordinates={coordinates}\n              onDelItem={this.onDelItem}\n              onDragEndList={this.onDragEndList}\n              />\n            </div>\n\n          <YandexMap mapData={mapData} \n          coordinates={coordinates}\n          onAddItem={this.onAddItem}\n          onDragEnd={this.onDragEnd}\n        />\n        \n          </div>\n        </React.Fragment>\n        )      \n    }\n\n  };\n","import App from './app';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}